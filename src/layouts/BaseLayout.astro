---
import '@/styles/tailwind.css';
import '@/styles/fonts.css';
import { z } from 'astro/zod';

// Shows up in browser tabs.
const SITE_NAME = 'JAWN';

const DEFAULTS = {
	LANG: 'en-US',
	OG_IMAGE: {
		url: '/og/social-card.png',
		alt: 'A Philly frisbee team',
	},
	TWITTER_USERNAME: '@JAWN_Ultimate',
};

const basic = z.object({
	/** Language tag (BCP 47). */
	locale: z.string().default(DEFAULTS.LANG),
	/** Text to display in the browser tab. */
	title: z.string().optional(),
	/** Use to set the `<title>` text manually. */
	rawTitle: z.string().optional(),
	/** A description for creating a bookmark for the page. */
	description: z.string().optional(),
	author: z.string().optional(),
});

const articleSchema = z.object({
	published_time: z.coerce.date(),
	modified_time: z.coerce.date(),
});

const ogImageSchema = z.object({
	/** Path to an image file. */
	url: z.string().startsWith('/'),
	/** Alt text for image. */
	alt: z.string().optional(),
});

/** @see https://ogp.me */
const ogSchema = z.object({
	/** A more descriptive title used by the OpenGraph protocol. */
	title: z.string().optional(),
	/** A description of the page used by the OpenGraph protocol. */
	description: z.string().optional(),
	article: articleSchema.optional(),
	image: ogImageSchema.default(DEFAULTS.OG_IMAGE),
});

// Twitter Cards will use OpenGraph images.
const twitterSchema = z.object({
	card: z.enum(['summary', 'summary_large_image']).default('summary_large_image'),
	/** Username for the website used in the card footer. */
	site: z.string().startsWith('@').default(DEFAULTS.TWITTER_USERNAME),
	/** Username for the content creator or author. */
	creator: z.string().startsWith('@').default(DEFAULTS.TWITTER_USERNAME),
});

const headMeta = basic
	.extend({
		og: ogSchema.default({}),
		twitter: twitterSchema.default({}),
	})
	.transform((data) => {
		const { og, twitter, ...basic } = data;
		return {
			...basic,
			title: basic.rawTitle ?? [basic.title, SITE_NAME].filter(Boolean).join(' | '),
			twitter,
			og: {
				...og,
				type: og.article ? 'article' : 'website',
				title: og.title ?? basic.rawTitle ?? basic.title,
				description: og.description ?? basic.description,
			},
		};
	});

export type HeadMetaProps = z.input<typeof headMeta>;

export type Props = HeadMetaProps & {
	/** Will be added to the `<body>` element. */
	class?: string;
};

const { class: className, ...meta } = Astro.props;
const parsed = headMeta.safeParse(meta);

if (!parsed.success || !parsed.data)
	console.error(`Invalid head meta props for %s: %o`, Astro.url.pathname, parsed.error.issues);

const { title, description, locale, og, twitter } = parsed.data! ?? {
	og: {},
	twitter: {},
};

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!doctype html>
<html lang={locale}>
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, viewport-fit=cover" />
		<meta name="generator" content={Astro.generator} />
		<link rel="canonical" href={canonicalURL} />
		<title>{title}</title>
		{description && <meta name="description" content={description} />}

		<slot name="head" />

		<meta property="og:site_name" content={SITE_NAME} />
		<meta property="og:type" content={og.type} />
		<meta property="og:url" content={canonicalURL} />
		<meta property="og:title" content={og.title} />
		{description && <meta property="og:description" content={og.description} />}
		{og.image?.url && <meta property="og:image" content={og.image.url} />}
		{og.image?.alt && <meta property="og:image:alt" content={og.image.alt} />}
		<meta name="twitter:card" content={twitter.card} />

		<meta name="twitter:site" content={twitter.site} />
		<meta name="twitter:creator" content={twitter.creator} />

		{/* Generated with `@astrojs/sitemap` integration. */}
		<link rel="sitemap" href="/sitemap-index.xml" />
	</head>
	<body class:list={[className]}>
		<slot />
	</body>
</html>
