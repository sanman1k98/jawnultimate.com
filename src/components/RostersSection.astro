---
import { getCollection, type CollectionEntry } from 'astro:content';

type Roster = CollectionEntry<'rosters'>;

const rosters = await getCollection('rosters');

// Sort by reverse chronological order and prioritize mixed rosters.
rosters.sort(({ data: a }, { data: b }) => {
	const [aDateValue, bDateValue] = [a.date.valueOf(), b.date.valueOf()];
	if (aDateValue > bDateValue)
		return -1; // `a` should come before `b`.
	else if (aDateValue < bDateValue)
		return 1; // `a` should come after `b`.
	else if (aDateValue === bDateValue && a.division === 'mixed')
		return -1; // Show mixed division rosters before open.
	else return 0;
});

const featuredRosters: Roster[] = [];
const otherRosters: Roster[] = [];

if (rosters.length) {
	const latestYear = rosters[0].data.date.getFullYear();
	for (const roster of rosters) {
		if (featuredRosters.length < 2 && roster.data.date.getFullYear() === latestYear) featuredRosters.push(roster);
		else otherRosters.push(roster);
	}
}

type Props = { class?: string };
---

<section class:list={['mx-auto font-overpass text-slate-800', Astro.props.class]}>
	<h2 class="text-center text-2xl font-bold tracking-tight sm:text-4xl">Check out who's playing</h2>
	<ul class="py-12">
		<div class="mx-auto flex flex-col items-center justify-center gap-4 text-center sm:flex-row sm:gap-6">
			{
				featuredRosters.map(({ id, data: { date, division } }) => (
					<li>
						<a
							class="block w-36 rounded-lg bg-emerald-600 p-3 px-4 text-lg font-bold text-white shadow shadow-emerald-500"
							href={`/${id}`}
						>
							{date.getFullYear()} {division.charAt(0).toUpperCase().concat(division.slice(1))}
						</a>
					</li>
				))
			}
		</div>
		<div class="mx-auto max-w-lg pt-12">
			{
				otherRosters.map(({ id, data: { date, division } }) => (
					<li>
						<a class="underline" href={`/${id}`}>
							{date.getFullYear()} {division.charAt(0).toUpperCase().concat(division.slice(1))}
						</a>
					</li>
				))
			}
		</div>
	</ul>
</section>
